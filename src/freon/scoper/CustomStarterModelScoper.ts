// Generated by the Freon Language Generator.
import { type FreNode, type FreNamedNode, FreNodeReference, FreNamespace, type FreScoper, FreScoperComposite } from "@freon4dsl/core";
import {LangModule4, ModuleReference, ModuleReference4, VarReference4} from "../language/gen";

/**
 * Class 'CustomStarterModelScoper' is meant to be a convenient place to add any
 * custom code for scoping.
 */
export class CustomStarterModelScoper implements FreScoper {
    mainScoper: FreScoperComposite;

    /**
     * Returns the element to which the 'pathname' refers. If the element cannot be found, or if the element is
     * not visible (private) from the location of 'modelelement', then null is returned.
     * If present, then the search is limited to elements which type is '_metatype'.
     * If this scoper does not handle the scope for 'modelelement' 'undefined' is returned.
     *
     * @param _node         the containing element, where 'pathname' should be visible
     * @param _doNotSearch  the element that we are trying to resolve
     * @param _pathname     the name or series of names of the element that we are searching for
     * @param _metatype     the _metatype of the element that we are searching for
     */
    resolvePathName(_node: FreNode, _doNotSearch: FreNodeReference<FreNamedNode>, _pathname: string[], _metatype?: string): FreNamedNode {
        return undefined;
    }

    /**
     *   Returns true if '_name' is known in the namespace containing '_node' or one
     *   of its surrounding namespaces.
     *   If this scoper does not handle the scope for '_node' 'undefined' is returned.     *
     *
     *   When parameter '_metatype' is present, it returns true if the element named '_name'
     *   is an instance of '_metatype'. There is no default setting for this parameter.
     *
     *   When parameter '_excludeSurrounding' is present, it returns true if the element named '_name'
     *   is known in the namespace containing 'modelelement', without looking in surrounding namespaces.
     *
     * @param _node
     * @param _name
     * @param _metatype
     * @param _excludeSurrounding
     */
    isInScope(_node: FreNode, _name: string, _metatype?: string, _excludeSurrounding?: boolean): boolean {
        return undefined;
    }

    /**
     *   Returns all elements that are visible in the namespace containing '_node' or one
     *   of its surrounding namespaces.
     *
     *   When parameter '_metatype' is present, it returns all elements that are an instance of '_metatype'.
     *   There is no default setting for this parameter.
     *
     *   When parameter '_excludeSurrounding' is present, it returns all elements that are visible in
     *   the namespace containing '_node', without looking in surrounding namespaces. Elements in
     *   surrounding namespaces are normally shadowed by elements with the same name in an inner namespace.
     *
     * @param _node
     * @param _metatype
     * @param _excludeSurrounding
     */
    getVisibleElements(_node: FreNode, _metatype?: string, _excludeSurrounding?: boolean): FreNamedNode[] {
        return undefined;
    }

    /**
     *   Returns the element named '_name' which is visible in the namespace containing '_node' or one
     *   of its surrounding namespaces.
     *
     *   When parameter '_metatype' is present, it returns the element that is an instance of '_metatype'.
     *   There is no default setting for this parameter.
     *
     *   When parameter '_excludeSurrounding' is present, it returns the element that is visible in
     *   the namespace containing '_node', without looking in surrounding namespaces. Elements in
     *   surrounding namespaces are normally shadowed by elements with the same name in an inner namespace.
     *
     * @param _node
     * @param _name
     * @param _metatype
     * @param _excludeSurrounding
     */
    getFromVisibleElements(_node: FreNode, _name: string, _metatype?: string, _excludeSurrounding?: boolean): FreNamedNode {
        return undefined;
    }

    /**
     *   Does the same as getVisibleElements, only it does not return the elements,
     *   but the names of the elements.
     *
     * @param _node
     * @param _metatype
     * @param _excludeSurrounding
     */
    getVisibleNames(_node: FreNode, _metatype?: string, _excludeSurrounding?: boolean): string[] {
        return undefined;
    }

    /**
     * Returns all FreNodes that are defined as additional namespaces for '_node'.
     * @param _node
     */
    additionalNamespaces(_node: FreNode): FreNode[] {
        return undefined;
    }

    /**
     * Returns the replacement namespace that can be found for '_node'.
     * @param _node
     */
    replacementNamespace(_node: FreNode): FreNamespace | undefined {
        // note instanceof does not function here!!
        if (!!_node && _node.freLanguageConcept() == "ModuleReference4") {
            const moduleRef: ModuleReference4 = (_node as ModuleReference4).module;
            if (!!moduleRef) {
                return FreNamespace.create(moduleRef.target.referred);
            }
        }

        // The following one works for A.C.i
        // But for the extra level (A.C.D.t) I get:
        // [MobX] Cycle detected in computation _FreNodeReference@569.referred: get referred()
        if (!!_node && _node.freLanguageConcept() == "VarReference4") {
            const moduleRef: ModuleReference4 = (_node as VarReference4).module;
            if (!!moduleRef) {
                return FreNamespace.create(moduleRef.target.referred);
            }
        }

        return undefined;
    }
}
